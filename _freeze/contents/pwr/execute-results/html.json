{
  "hash": "513a5200b095c48255c1715e99efc0cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{pwr} basics\"\n---\n\n\n\n\nIn this chapter, the aim is to give tutorial on how functions from `pwr` [@pkg_pwr] packages works. This package comes with handful of handy functions to calculate sample sizes and power analysis with some useful plot to visualize sample size and power. The subsequent chapters will shows usage of each functions.\n\nTo read the full documentation, you can visit the official [{pwr} vignette](https://cran.r-project.org/web/packages/pwr/vignettes/pwr-vignette.html), which also gives much of the references here.\n\n## Basic Usage\n\nThe main function to calculate sample size or power generally in the form of `pwr.stats_type.test()`.\n\n- `pwr.p.test()`: one-sample proportion test\n- `pwr.2p.test()`: two-sample proportion test\n- `pwr.2p2n.test()`: two-sample proportion test (unequal sample sizes)\n- `pwr.t.test()`: two-sample, one-sample and paired t-tests\n- `pwr.t2n.test()`: two-sample t-tests (unequal sample sizes)\n- `pwr.anova.test()`: one-way balanced ANOVA\n- `pwr.r.test()`: correlation test\n- `pwr.chisq.test()`: chi-squared test (goodness of fit and association)\n- `pwr.f2.test()`: test for the general linear model\n\nThe basic arguments of these functions are:\n\n1. **Effect size:** depending on the specific functions used (e.g., `h` is used in one or two-sample proportion test)\n\n2. **`n`**: the sample sizes (usually, for *each* comparison groups)\n\n3. **`sig.level`**: A type I error ($\\alpha$), probability of not rejecting the null hypothesis when it is false, usually default to `0.05`.\n\n4. **`power`**: A power ($1 – β$), probability that the test will correctly reject the null hypothesis when the alternative hypothesis is true, usually default to `0.08`.\n\n5. **`alternative`**: “two.sided”, “less”, or “greater”.\n\nFrom arguments 1 to 4 above, the key idea is to _**leaves**_ whichever one you want to calculate as `NULL` (i.e., just don't fill it). \n\n\n## Sample size & Power Calculation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pwr)\n```\n:::\n\n\n\nFor example, given we want to do a one sample t-test, with effect size (`d`) = 0.5, significant level = 0.05, and power = 0.8. \n\n**To calculate sample size**, just leaves `n` and provide the rest:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find `n`\npwr.t.test(d = 0.5, \n           sig.level = 0.05, power = 0.8, \n           type = \"one.sample\", alternative = \"two.sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 33.36713\n              d = 0.5\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n```\n\n\n:::\n:::\n\n\nThe sample size (`n`) = `34`\n\n\n**To calculate power** (given, say `n` = 20), just leave `power` (or set to `NULL`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find `n`\npwr.t.test(d = 0.5, \n           n = 20,\n           sig.level = 0.05,\n           power = NULL,\n           type = \"one.sample\", alternative = \"two.sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 20\n              d = 0.5\n      sig.level = 0.05\n          power = 0.5645044\n    alternative = two.sided\n```\n\n\n:::\n:::\n\n\nPower = `0.5645044`\n\n\n## Plotting\n\n\n`pwr` [@pkg_pwr] provides handy `plot()` methods to visualized how power changes as sample size changes (and vice versa). \n\nFirst, assign the result of `pwr.*()` functions to an object. Then, simply called `plot()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nres.t.1 <- pwr.t.test(\n  d = 0.5,\n  sig.level = 0.05, power = 0.8,\n  type = \"one.sample\", alternative = \"two.sided\"\n)\n\nres.t.1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 33.36713\n              d = 0.5\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_set(theme_minimal())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(res.t.1)\n```\n\n::: {.cell-output-display}\n![](pwr_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n(It will try using `ggplot`. if not installed, `base` R plot will be used.)\n\n## Internals\n\nThe object from `pwr.*()` functions stores information of each arguments you've called and its calculation. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsloop::otype(res.t.1) # Object Type\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"S3\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(res.t.1) # Special class\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"power.htest\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(res.t.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 7\n $ n          : num 33.4\n $ d          : num 0.5\n $ sig.level  : num 0.05\n $ power      : num 0.8\n $ alternative: chr \"two.sided\"\n $ note       : NULL\n $ method     : chr \"One-sample t test power calculation\"\n - attr(*, \"class\")= chr \"power.htest\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# To get individual arguments for further calculation\nres.t.1$n\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33.36713\n```\n\n\n:::\n\n```{.r .cell-code}\nres.t.1$power\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8\n```\n\n\n:::\n:::\n",
    "supporting": [
      "pwr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}